/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package greedyalgo;
import java.util.LinkedList;
import java.util.Queue;
/**
 *
 * @author shivam
 */
class HuffmanNode{
    char data;
    int frequency;
    HuffmanNode left;
    HuffmanNode right;
}
public class EfficientHuffmanCoding {
    public void huffmanCoding(){
        int n=6;
        char arr[]={'a', 'b', 'c', 'd', 'e', 'f'};
        int frquency[]={5, 9, 12, 13, 16, 45 };
        
        Queue q1=new LinkedList();
        Queue q2=new LinkedList();
        
        for(int i=0;i<n;i++){
            HuffmanNode node=new HuffmanNode();
            node.data=arr[i];
            node.frequency=frquency[i];
            node.left=null;
            node.right=null;
            
            q1.add(node);
        }
        HuffmanNode root=null;
        HuffmanNode var1=null;
        HuffmanNode var2=null;
        HuffmanNode var3=null;
        HuffmanNode var4=null;
        int sum=0;
        while(q1.size()>1||q2.size()>1){
            if(q1.isEmpty()){
                var1=(HuffmanNode) q2.peek();
                q2.poll();
                
                var2=(HuffmanNode) q2.peek();
                q2.poll();
                
                HuffmanNode newnode = new HuffmanNode();
                newnode.frequency=var1.frequency+var2.frequency;
                newnode.data='-';
                newnode.left=var1;
                newnode.right=var2;
                root=newnode;
                q2.add(newnode);
            }
            else if(q2.isEmpty()){
                var1=(HuffmanNode) q1.peek();
                q2.poll();
                
                var2=(HuffmanNode) q1.peek();
                q2.poll();
                
                HuffmanNode newnode = new HuffmanNode();
                newnode.frequency=var1.frequency+var2.frequency;
                newnode.data='-';
                newnode.left=var1;
                newnode.right=var2;
                root=newnode;
                q2.add(newnode);
            }
            else{
                var3=(HuffmanNode) q1.peek();
                var4=(HuffmanNode) q2.peek();
                if(var3.frequency<var4.frequency){
                    q1.poll();
                    var1=var3;
                }
                else{
                    q2.poll();
                    var1=var4;
                }
                var3=(HuffmanNode) q1.peek();
                var4=(HuffmanNode) q2.peek();
                if(var3.frequency<var4.frequency){
                    q1.poll();
                    var2=var3;
                }
                else{
                    q2.poll();
                    var2=var4;
                }
                HuffmanNode newnode = new HuffmanNode();
                newnode.frequency=var1.frequency+var2.frequency;
                newnode.data='-';
                newnode.left=var1;
                newnode.right=var2;
                root=newnode;
                q2.add(newnode);
            }
        }
        printCode(root, " ");
    }
    public void printCode(HuffmanNode root, String s) { 
  
        // base case; if the left and right are null 
        // then its a leaf node and we print 
        // the code s generated by traversing the tree. 
        if (root.left 
                == null
            && root.right 
                   == null
            && Character.isLetter(root.data)) { 
  
            // c is the character in the node 
            System.out.println(root.data + ":" + s); 
  
            return; 
        }
        printCode(root.left, s + "0"); 
        printCode(root.right, s + "1"); 
    }
}
